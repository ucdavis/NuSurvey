@using MvcContrib.FluentHtml
@model NuSurvey.MVC.Controllers.QuestionViewModel



	<ul>
        <li>
			<div class="editor-label required">
				@Html.LabelFor(model => model.Question.Category)<span>*</span> 
			</div>
			<div class="editor-field">                      
                @this.Select("Question.Category").Options(Model.Categories, x => x.Id, x => x.Name).FirstOption("--Select Category--").Selected(Model.Question.Category != null ? Model.Question.Category.Id.ToString() : Model.Category != null ? Model.Category.Id.ToString() : string.Empty)
				@*@Html.EditorFor(model => model.Question.Category)*@
				@Html.ValidationMessageFor(model => model.Question.Category)
			</div>
		</li>
		<li>
			<div class="editor-label required">
				@Html.LabelFor(model => model.Question.Name)<span>*</span> 
			</div>
			<div class="editor-field wideText">
				@Html.TextBoxFor(model => model.Question.Name, new { @title = "To underline a word put &lt;u&gt; before it and &lt;/u&gt; after it.", @class = "text-box", style = "width:40em;" })
				@Html.ValidationMessageFor(model => model.Question.Name)
			</div>
		</li>
		<li>
			<div class="editor-label">
				@Html.LabelFor(model => model.Question.IsActive) 
			</div>
			<div class="editor-field">
				@Html.EditorFor(model => model.Question.IsActive)
				@Html.ValidationMessageFor(model => model.Question.IsActive)
			</div>
		</li>
        <li>
			<div class="editor-label">
				@Html.LabelFor(model => model.Question.AllowBypass) 
			</div>
			<div class="editor-field">
				@Html.EditorFor(model => model.Question.AllowBypass)
				@Html.ValidationMessageFor(model => model.Question.AllowBypass)
			</div>
		</li>
@*		<li>
			<div class="editor-label">
				@Html.LabelFor(model => model.Question.Order) 
			</div>
			<div class="editor-field">
				@Html.EditorFor(model => model.Question.Order)
				@Html.ValidationMessageFor(model => model.Question.Order)
			</div>
		</li>*@
		<li>
			<div class="editor-label">
				@Html.LabelFor(model => model.Question.IsOpenEnded) 
			</div>
			<div class="editor-field">            
                @Html.CheckBoxFor(x => x.Question.IsOpenEnded, new { @title = "When you use an open ended question you should have Response <strong>Choice</strong> with:<br />1) The lowest possible value <br />2) The highest possible value <br />3) All the values in between that you want a specific score<br />Example:<br />Choice 2 Score 1<br />Choice 3 Score 2<br />Choice 4 Score 3" })
				@*@Html.EditorFor(model => model.Question.IsOpenEnded)*@
				@Html.ValidationMessageFor(model => model.Question.IsOpenEnded)
			</div>
		</li>
        <li id="openType" style="display:none">
			<div class="editor-label">
				@Html.LabelFor(model => model.Question.OpenEndedQuestionType) 
			</div>
			<div class="editor-field">  
                @Html.RadioButtonFor(x => x.Question.OpenEndedQuestionType, (int)NuSurvey.Core.Domain.QuestionType.WholeNumber) <label for="Question_OpenEndedQuestionType">Whole Number</label> <br />
                @Html.RadioButtonFor(x => x.Question.OpenEndedQuestionType, (int)NuSurvey.Core.Domain.QuestionType.Decimal) <label for="Question_OpenEndedQuestionType">Decimal</label>  <br />
                @Html.RadioButtonFor(x => x.Question.OpenEndedQuestionType, (int)NuSurvey.Core.Domain.QuestionType.Time) <label for="Question_OpenEndedQuestionType">Time</label>  <br /> 
                @Html.RadioButtonFor(x => x.Question.OpenEndedQuestionType, (int)NuSurvey.Core.Domain.QuestionType.TimeAmPm) <label for="Question_OpenEndedQuestionType">Time With AM/PM</label>  <br /> 
                @Html.RadioButtonFor(x => x.Question.OpenEndedQuestionType, (int)NuSurvey.Core.Domain.QuestionType.TimeRange) <label for="Question_OpenEndedQuestionType">Time Range</label>  <br /> 
			</div>
		</li>
@*		<li>
			<div class="editor-label">
				@Html.LabelFor(model => model.Question.CreateDate) 
			</div>
			<div class="editor-field">
				@Html.EditorFor(model => model.Question.CreateDate)
				@Html.ValidationMessageFor(model => model.Question.CreateDate)
			</div>
		</li>*@
        <li>
			<div class="editor-label required">
				@Html.LabelFor(model => model.Question.Responses)<span>*</span> 
			</div>
			<div class="editor-field">
				@Html.ValidationMessageFor(model => model.Question)
                <table id="ResponseTable" class="DragnDrop">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Choice</th>
                            <th>Score</th>
                            <th>Hide</th>
                        </tr>
                    </thead>
                    <tbody>
                    @{var respCount = 0;}
                    @{var orderId = "";}
                    @foreach (var resp in Model.Responses)
                    { 
                        <tr id="@respCount">
                            <td></td>
                            <td><input id="Response" class="text-box single-line" type="text" name="Response[@respCount].Value" value="@resp.Value"></input></td>
                            <td>
                                @{orderId = string.Format("OrderId{0}", respCount);}
                                <input id="Response" class="text-box single-line" type="text" name="Response[@respCount].Score" value="@resp.Score"></input>
                                <input id="Response" type="text" value="@resp.ResponseId" name="Response[@respCount].ResponseId" style="display:none"/> 
                                <input id="@orderId" type="text" value="@respCount" name="Response[@respCount].Order" style="display:none"/> 
                            </td>
                            <td>
                            @{var checkId = "Response_" + respCount + "__Remove";}
                            @{var nameId = "Response[" + respCount + "].Remove";}
                            @{var isChecked = "";}
                            @if(resp.Remove){
                                isChecked = "checked=\"checked\"";
                            }
                            <input id="@checkId" type="checkbox" name="@nameId" @isChecked value="true"/>
                            <input type="hidden" value="false" name="@nameId">
                            </td>
                        </tr>
                                  respCount = respCount + 1;
                    }
                    @if (respCount == 0)
                    {                     
                        <tr id="@respCount">
                            <td></td>
                            <td><input id="Response" class="text-box single-line" type="text" name="Response[@respCount].Value"></input></td>
                            <td>
                            <input id="Response" class="text-box single-line" type="text" name="Response[@respCount].Score"></input>
                            <input id="OrderId0" type="text" value="0" name="Response[0].Order" style="display:none"/> 
                            </td>
                            <td>@Html.CheckBox("Response[" + respCount + "].Remove")</td>
                        </tr>
                    }
                    </tbody>
                </table>
                <img id="AddResponses" src=@Url.Content("~/Images/plus.png") style="width:24px; height:24px;" />
			</div>            
        </li>
		<li>
			@* For the clear and submit buttons an empty label is required. Example: <label>&nbsp;</label> *@
			<label>&nbsp;</label>
			<input class="button" type="submit" value="Submit" /> |
                                @if (Model.Category != null)
                                {
                                    <a href="@Url.Action("Edit", "Category", new { id = @Model.Category.Id })">Cancel</a> 
                                }
                                else
                                { 
                                    <a href="@Url.Action("Edit", "Survey", new { id = @Model.Survey.Id })">Cancel</a>         
                                }
		</li>
	</ul>